-check if the use of `collect_together()` and `collect_apart()` tampers the previously set COLLECTOR_COLLECT_TOGETHER.
-separate the collections installation, etc, from the main process of cmake(ie: like yarn install, yarn build)
-make a list of collector ready projects, TESTED only
-when changed some version of collection to download, if was previously compiled with, the build does not trigger the download step cause the cache thinks that target is already downloaded, so starts only an update step 
-there is one bug, if the collections folder of project is deleted, the compilation cant find some collections, couse does not installs some of them
-the optional variable for collect function, RETURN_TARGET, can hold anything, need to be set to only boolean or something like that
-need to handle/set/add to CMAKE_PREFIX_PATH for cmake to be able to find modules like SDL2.cmake in there(this one for example is installed manually to collections) ie (list(APPEND CMAKE_PREFIX_PATH ${COLLECTOR_INSTALLS}/${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}/cmake))
-need a variable so can access the full path to currently installed collections, this is dependant on compiler and version ie(${COLLECTOR_INSTALLS}/${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION})
-also update doc to show how to use custom manually installed libraries and headers, like with SDL2
-introduce tests in collections
-add hack used in frittersFrontend for findpackage after a external_project_add
-recheck all of collect_src, store paths, behaviour when collect together and apart, naming conventions, the .git needed in repo name parameter when calling function
-put in readme the use of return target in collect function
-make collect_src to add source files before add_executable in order to be able to use the downloaded source files, like some .cpp, or be able to add files to compile later with some command like target_sources(), maybe make optional the use of dependent parameter in functions colelct and collect_src
-rethink how to use fetchContent_make_available to compile and install things
-start using GIT_SHALLOW <bool> to avoid cloning whole collections, at least when used in https://cmake.org/cmake/help/latest/module/ExternalProject.html, with fetch content i do not know
-the separation of builds in temp workbench for different build types is working very badly, at least when nos specified manually i think, or in vscode when changed build type in extension option appearing in botton of vscode, i cant understnad, but may be something of cmake cache of external projects, because on really clean configure(ie closes vscode opens and configure , then build) it stores the compiled collection where it should ${COLLECTOR_DIR}/temp_workbench/${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}-${CMAKE_GENERATOR_NO_SPACES}/${collection_name_hash_appended}/${CMAKE_BUILD_TYPE}/ on subsecuent changes of build type(in vscode) it remains using previous build type in the mentioned path, or uses ${CMAKE_BUILD_TYPE} as empty, not sure , and i think that when openend for first time(selected kit and all) in vscode it behaves very badly regarding same issue, this last issue if is that ${CMAKE_BUILD_TYPE} is empty, probably need to redefine it in collector.cmake as debug or something default UPDT: indeed when not specified ${CMAKE_BUILD_TYPE} it appears empty, causing the storage of build collections cache in wrong places, this also brings issues with install directories of collections (COLLECTOR_CMAKE_INSTALL_PREFIX), so for now will be setted to debug as default in collector.cmake, not tested though
-need to separate collections installations and builds cache for diferent target platforms, for something in the future be able to work with multiple platforms
